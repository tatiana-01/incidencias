// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(IncidenciasContext))]
    [Migration("20230719114254_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.Area", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("nombreArea")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("id");

                    b.ToTable("Areas", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Categoria", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("nombreCategoria")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.HasKey("id");

                    b.ToTable("Categorias", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Email", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("tipoEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.ToTable("Emails", (string)null);
                });

            modelBuilder.Entity("Core.Entities.EmailTrainer", b =>
                {
                    b.Property<string>("idTrainer")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("idEmail")
                        .HasColumnType("int");

                    b.Property<string>("trainerEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("idTrainer", "idEmail");

                    b.HasIndex("idEmail");

                    b.ToTable("EmailsTrainers", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Hardware", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("idCategoria")
                        .HasColumnType("int");

                    b.Property<int>("idPuesto")
                        .HasColumnType("int");

                    b.Property<int>("idTipoHardware")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("idPuesto");

                    b.HasIndex("idTipoHardware");

                    b.ToTable("Hardwares", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Incidencia", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("fechaReporte")
                        .HasColumnType("Date");

                    b.Property<int>("idCategoria")
                        .HasColumnType("int");

                    b.Property<int>("idPuesto")
                        .HasColumnType("int");

                    b.Property<int>("idTipoIncidencia")
                        .HasColumnType("int");

                    b.Property<string>("idTrainer")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("id");

                    b.HasIndex("idCategoria");

                    b.HasIndex("idPuesto");

                    b.HasIndex("idTipoIncidencia");

                    b.HasIndex("idTrainer");

                    b.ToTable("Incidencias", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Puesto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("idSalon")
                        .HasColumnType("int");

                    b.Property<string>("nombrePuesto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.HasIndex("idSalon");

                    b.ToTable("Puestos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Salon", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("idArea")
                        .HasColumnType("int");

                    b.Property<string>("nombreSalon")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("numeroPuestos")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("idArea");

                    b.ToTable("Salones", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Software", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("idCategoria")
                        .HasColumnType("int");

                    b.Property<int>("idPuesto")
                        .HasColumnType("int");

                    b.Property<int>("idTipoSoftware")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("idCategoria");

                    b.HasIndex("idPuesto");

                    b.HasIndex("idTipoSoftware");

                    b.ToTable("Softwares", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Telefono", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.ToTable("Telefonos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TelefonoTrainer", b =>
                {
                    b.Property<string>("idTrainer")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("idTelefono")
                        .HasColumnType("int");

                    b.Property<string>("numeroTelefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("idTrainer", "idTelefono");

                    b.HasIndex("idTelefono");

                    b.ToTable("TelefonoTrainers", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TipoHardware", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("nombreHardware")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.ToTable("TiposHardware", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TipoIncidencia", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NivelIncidencia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.ToTable("TipoIncidencia", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TipoSoftware", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("nombreSoftware")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.ToTable("TiposSoftware", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Trainer", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("nombreCompleto")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("id");

                    b.ToTable("Trainers", (string)null);
                });

            modelBuilder.Entity("Core.Entities.EmailTrainer", b =>
                {
                    b.HasOne("Core.Entities.Email", "email")
                        .WithMany("emailsTrainers")
                        .HasForeignKey("idEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Trainer", "trainer")
                        .WithMany("emailsTrainers")
                        .HasForeignKey("idTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("email");

                    b.Navigation("trainer");
                });

            modelBuilder.Entity("Core.Entities.Hardware", b =>
                {
                    b.HasOne("Core.Entities.Puesto", "puesto")
                        .WithMany("hardwares")
                        .HasForeignKey("idPuesto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Categoria", "categoria")
                        .WithMany("hardwares")
                        .HasForeignKey("idTipoHardware")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoHardware", "tipoHardware")
                        .WithMany("hardwares")
                        .HasForeignKey("idTipoHardware")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("categoria");

                    b.Navigation("puesto");

                    b.Navigation("tipoHardware");
                });

            modelBuilder.Entity("Core.Entities.Incidencia", b =>
                {
                    b.HasOne("Core.Entities.Categoria", "categoria")
                        .WithMany("incidencias")
                        .HasForeignKey("idCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Puesto", "puesto")
                        .WithMany("incidencias")
                        .HasForeignKey("idPuesto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoIncidencia", "tipoIncidencia")
                        .WithMany("incidencias")
                        .HasForeignKey("idTipoIncidencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Trainer", "trainer")
                        .WithMany("incidencias")
                        .HasForeignKey("idTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("categoria");

                    b.Navigation("puesto");

                    b.Navigation("tipoIncidencia");

                    b.Navigation("trainer");
                });

            modelBuilder.Entity("Core.Entities.Puesto", b =>
                {
                    b.HasOne("Core.Entities.Salon", "salon")
                        .WithMany("puestos")
                        .HasForeignKey("idSalon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("salon");
                });

            modelBuilder.Entity("Core.Entities.Salon", b =>
                {
                    b.HasOne("Core.Entities.Area", "area")
                        .WithMany("salones")
                        .HasForeignKey("idArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("area");
                });

            modelBuilder.Entity("Core.Entities.Software", b =>
                {
                    b.HasOne("Core.Entities.Categoria", "categoria")
                        .WithMany("softwares")
                        .HasForeignKey("idCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Puesto", "puesto")
                        .WithMany("softwares")
                        .HasForeignKey("idPuesto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoSoftware", "tipoSoftware")
                        .WithMany("softwares")
                        .HasForeignKey("idTipoSoftware")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("categoria");

                    b.Navigation("puesto");

                    b.Navigation("tipoSoftware");
                });

            modelBuilder.Entity("Core.Entities.TelefonoTrainer", b =>
                {
                    b.HasOne("Core.Entities.Telefono", "telefono")
                        .WithMany("telefonosTrainers")
                        .HasForeignKey("idTelefono")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Trainer", "trainer")
                        .WithMany("telefonosTrainers")
                        .HasForeignKey("idTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("telefono");

                    b.Navigation("trainer");
                });

            modelBuilder.Entity("Core.Entities.Area", b =>
                {
                    b.Navigation("salones");
                });

            modelBuilder.Entity("Core.Entities.Categoria", b =>
                {
                    b.Navigation("hardwares");

                    b.Navigation("incidencias");

                    b.Navigation("softwares");
                });

            modelBuilder.Entity("Core.Entities.Email", b =>
                {
                    b.Navigation("emailsTrainers");
                });

            modelBuilder.Entity("Core.Entities.Puesto", b =>
                {
                    b.Navigation("hardwares");

                    b.Navigation("incidencias");

                    b.Navigation("softwares");
                });

            modelBuilder.Entity("Core.Entities.Salon", b =>
                {
                    b.Navigation("puestos");
                });

            modelBuilder.Entity("Core.Entities.Telefono", b =>
                {
                    b.Navigation("telefonosTrainers");
                });

            modelBuilder.Entity("Core.Entities.TipoHardware", b =>
                {
                    b.Navigation("hardwares");
                });

            modelBuilder.Entity("Core.Entities.TipoIncidencia", b =>
                {
                    b.Navigation("incidencias");
                });

            modelBuilder.Entity("Core.Entities.TipoSoftware", b =>
                {
                    b.Navigation("softwares");
                });

            modelBuilder.Entity("Core.Entities.Trainer", b =>
                {
                    b.Navigation("emailsTrainers");

                    b.Navigation("incidencias");

                    b.Navigation("telefonosTrainers");
                });
#pragma warning restore 612, 618
        }
    }
}
